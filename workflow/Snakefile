import os
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
conda_env = "envs/environment.yml"

#configfile: "cortical_mm3.yml"

# setup folder + filename structure for output:
raw_str = "{dataset}_position-{position}_mip-{mip}_size-{size}"
processed_str = ("ncells-{ncells}_expand-{expand}_smoothiter-{smoothiter}_" +
                "smoothradius-{smoothradius}_shrink-{shrink}_roi-{roi}_merge-{merge}")
mesh_str = "eps-{envelopsize}"

raw_data_path = "results/raw/" + raw_str + "/raw.vtk"
processed_data_path = "results/processed/{rawdata}/" + processed_str + "/processed.vtk"
surfaces_dir = directory("results/surfaces/{rawdata}/{processing}/")
csgtree = "results/surfaces/{rawdata}/{processing}/csgtree.json"
mesh_path = "results/meshes/{rawdata}/{processing}/" + mesh_str + "/mesh.xdmf"
mesh_tag_path = "results/meshes/{rawdata}/{processing}/" + mesh_str + "/facets.xdmf"
cellsizeplot = "results/processed/{rawdata}/" + processed_str + "/cellsizes.png"
imagestatistic = "results/processed/{rawdata}/" + processed_str + "/imagestatistic.yml"
meshstatistic = "results/meshes/{rawdata}/{processing}/" + mesh_str + "/meshstatistic.yml"
mesh_img = "results/meshes/{rawdata}/{processing}/" + mesh_str + "/mesh.png"
zipped = "zipped/volume_ncells_{ncells}_size_{size}.zip"
zipped_surf = "zipped/surface_ncells_{ncells}_size_{size}.zip"


ruleorder: generateSurfaceTags > generateMesh
size_to_ntasks =  lambda size: min(64, int((size/5000)**2))
size_to_minutes = lambda size: int((size/5000)**2 * 60)


rule all:
    input:
        expand(cellsizeplot,
               rawdata=expand(raw_str, **config), **config),
        expand(csgtree, rawdata=expand(raw_str, **config),
               processing=expand(processed_str, **config), **config),   
        expand(mesh_img, rawdata=expand(raw_str, **config),
               processing=expand(processed_str, **config), **config),  
        expand(meshstatistic, rawdata=expand(raw_str, **config),
               processing=expand(processed_str, **config), **config),
        expand(mesh_tag_path, rawdata=expand(raw_str, **config),
               processing=expand(processed_str, **config), **config),
        #expand(zipped, rawdata=expand(raw_str, **config),
        #       processing=expand(processed_str, **config), **config),
        #expand(zipped_surf, rawdata=expand(raw_str, **config),
        #       processing=expand(processed_str, **config), **config),

rule zipMesh:
    output:
        zipped
    input:
        ("results/meshes/minnie65_position-225182-107314-22000_mip-2_size-{size}/" + 
         "ncells-{ncells}_expand-3_smoothiter-2_smoothradius-40_shrink-1/eps-4/")
    shell:
        """
        zip -rj9 {output} {input}
        """

rule zipSurf:
    output:
        zipped_surf
    input:
        ("results/surfaces/minnie65_position-225182-107314-22000_mip-2_size-{size}/" + 
         "ncells-{ncells}_expand-3_smoothiter-2_smoothradius-40_shrink-1/")
    shell:
        """
        zip -rj9 {output} {input}
        """

rule downloadImageData:
    output:
        rawdata=raw_data_path
    conda:
        conda_env
    params:
        cloudpath=lambda wildcards: config["cloudpath"][wildcards.dataset]
    shell:
        """
        python3 workflow/scripts/download_data.py --cloudpath {params.cloudpath} \
        --position {wildcards.position} --mip {wildcards.mip} --size {wildcards.size} \
        --output {output.rawdata}
        """

rule processImageData:
    input:
        rawdata="results/raw/{rawdata}/raw.vtk"
    output:
        imagestatistic,
        outfile=processed_data_path,
    conda:
        conda_env
    resources:
        ntasks=lambda wildcards: size_to_ntasks(int(wildcards.rawdata.split("size-")[-1])),
        time=lambda wildcards: size_to_minutes(int(wildcards.rawdata.split("size-")[-1]))
    shell:
        """
        python3 workflow/scripts/process_image_data.py --infile {input.rawdata} \
        --ncells {wildcards.ncells} --expand {wildcards.expand} \
        --roi {wildcards.roi} \
        --smoothiter {wildcards.smoothiter} --smoothradius {wildcards.smoothradius} \
        --shrink {wildcards.shrink} \
        --merge {wildcards.merge} \
         --output {output.outfile} \
        --nworkers {resources.ntasks}
        """

rule extractSurfaces:
    input:
        processeddata="results/processed/{rawdata}/{processing}/processed.vtk"
    output:
        outdir=surfaces_dir,
        csgtree=csgtree
    resources:
        time=lambda wildcards: size_to_minutes(int(wildcards.rawdata.split("size-")[-1])/2)
    conda:
        conda_env
    shell:
        """
        python3 workflow/scripts/extract_surfaces.py --infile {input.processeddata} \
        --outdir {output.outdir}
        """

rule generateMesh:
    input:
        "fTetWild/build/FloatTetwild_bin",
        csgtree=csgtree,
    output:
        outfile=mesh_path
    conda:
        conda_env
    resources:
        ntasks=lambda wildcards: size_to_ntasks(int(wildcards.rawdata.split("size-")[-1])),
        time=lambda wildcards: size_to_minutes(int(wildcards.rawdata.split("size-")[-1]))
    threads: lambda wildcards: size_to_ntasks(int(wildcards.rawdata.split("size-")[-1]))
    shell:
        """
        python3 workflow/scripts/generate_mesh.py \
        --csgtree {input.csgtree} --envelopsize {wildcards.envelopsize} --output {output.outfile} \
        --max_threads {resources.ntasks}
        """

rule generateSurfaceTags:
    input:
        meshfile=mesh_path
    output:
        mesh_tag_path
    conda:
        conda_env
    shell:
        """
        python3 workflow/scripts/generate_surface_tags.py \
        --infile {input.meshfile} --output {output}
        """

rule evaluateMesh:
    input:
        mesh_path
    output:
        meshstatistic
    conda:
        conda_env
    shell:
        """
        python3 workflow/scripts/evaluate_mesh.py \
        --infile {input} --output {output}
        """

rule takeScreenshot:
    input:
        mesh_path
    output:
        mesh_img
    conda:
        conda_env
    shell:
        """
        xvfb-run -a python3 workflow/scripts/generate_screenshot.py \
        --infile {input} --output {output}
        """

rule generateAnalysisPlot:
    input:
        infile=imagestatistic
    output:
        plotfile=cellsizeplot
    conda:
        conda_env
    shell:
        """
        python3 workflow/scripts/generate_analysis_plots.py \
        --infile {input.infile} --output {output.plotfile}
        """

HTTP = HTTPRemoteProvider()

rule installFTetWild:
    input:
        HTTP.remote("github.com/wildmeshing/fTetWild/archive/refs/heads/master.zip",
                    keep_local=False)
    conda:
        conda_env
    output:
        "fTetWild/build/FloatTetwild_bin",
        directory("fTetWild")
    shell:
        """
        unzip {input} -d fTetWild && cd fTetWild/build/ && cmake ../fTetWild-master && make -j
        """

