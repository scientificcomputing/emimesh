import os
import yaml
conda_env = "envs/environment.yml"

configfile: "config_files/cortical_mm3.yml"

# setup folder + filename structure for output:
raw_str = "_".join([k + "+{" +k + "}" for k in config["raw"].keys()])
processed_str = "_".join([k + "+{" +k + "}" for k in config["processing"].keys()])
mesh_str = "_".join([k + "+{" +k + "}" for k in config["meshing"].keys()])
name = config["name"]

raw_dir = "results/{name}/raw/{rawdata}/"
processed_dir = "results/{name}/processed/{rawdata}/{processing}/"
surf_dir = "results/{name}/surfaces/{rawdata}/{processing}/"
mesh_dir = "results/{name}/meshes/{rawdata}/{processing}/{meshing}/"

raw_data_path = raw_dir + "raw.vtk"

processed_data_path = processed_dir + "processed.vtk"
csgtree = surf_dir + "csgtree.json"
cellsizeplot = processed_dir + "cellsizes.png"
imagestatistic = processed_dir + "imagestatistic.yml"

mesh_path = mesh_dir + "mesh.xdmf"
mesh_tag_path = mesh_dir + "facets.xdmf"
meshstatistic = mesh_dir + "meshstatistic.yml"
mesh_img = mesh_dir + "mesh.png"
zipped = "zipped/{name}/{meshing}/volmesh_{rawdata}-{processing}.zip"
zipped_surf = "zipped_surf/{name}/{meshing}/surfaces_{rawdata}-{processing}.zip"
surfaces_dir = directory(surf_dir)


ruleorder: generateSurfaceTags > generateMesh
size_to_ntasks =  lambda size: min(24, int(1 + (size/400)**2))
size_to_minutes = lambda size: int((size/500)**3 * 120 + 60  )

def filename2options(fn):
    cmd = ""
    pairs = fn.split("_")
    for p in pairs:
        k,v = p.split("+")
        cmd+= f"--{k} {v} "
    return cmd

def name2options(name, step):
    with open(f"config_files/{name}.yml") as infile:
        options = yaml.load(infile, Loader=yaml.FullLoader)["fixed"].get(step, {})
    cmd = ""
    for k,val in options.items():
        if isinstance(val, list):
            for v in val:
                cmd+= f"--{k} {v} "
        else:
            cmd+= f"--{k} {val} "
    return cmd

rd = expand(raw_str, **config["raw"])
pd = expand(processed_str, **config["processing"])
md = expand(mesh_str, **config["meshing"])

rule all:
    input:
        expand(mesh_img, rawdata=rd,processing=pd, meshing=md, name=name),  
        expand(meshstatistic, rawdata=rd,processing=pd, meshing=md, name=name),
        expand(mesh_tag_path, rawdata=rd,processing=pd, meshing=md, name=name),
        expand(zipped, rawdata=rd,processing=pd, meshing=md, name=name),
        expand(zipped_surf, rawdata=rd,processing=pd, meshing=md, name=name),

rule zipMesh:
    output:
        zipped
    input:
        mesh_dir=mesh_dir,
        mesh_path=mesh_path,
        mesh_tag_path=mesh_tag_path
    shell:
        """
        zip -rj9 {output} {input.mesh_dir} -i '*.xdmf' '*.h5' '*.png' '*.yml'
        """

rule zipSurf:
    output:
        zipped_surf
    input:
        surf_dir=surf_dir,
    shell:
        """
        zip -rj9 {output} {input.surf_dir} -i '*.ply'
        """

rule downloadImageData:
    output:
        rawdata=raw_data_path
    conda:
        conda_env
    params:
        options=lambda wildcards: filename2options(wildcards.rawdata),
        fopt=lambda wildcards: name2options(wildcards.name, "raw")
    shell:
        """
        python3 workflow/scripts/download_data.py \
        {params.options} {params.fopt} \
        --output {output.rawdata}
        """

rule processImageData:
    input:
        rawdata=raw_data_path
    output:
        #imagestatistic,
        outfile=processed_data_path,
    conda:
        "envs/pycle_env.yml"
    resources:
        ntasks=10,
        time=30,
        gpus=1,
    params:
        options=lambda wildcards: filename2options(wildcards.processing),
        fopt=lambda wildcards: name2options(wildcards.name, "processing")
    shell:
        """
        python3 workflow/scripts/process_image_data.py --infile {input.rawdata} \
        {params.options} {params.fopt} \
        --output {output.outfile} \
        --nworkers {resources.ntasks}
        """

rule extractSurfaces:
    input:
        processeddata=processed_data_path
    output:
        outdir=surfaces_dir,
        csgtree=csgtree
    resources:
        time=120,
        ntasks=36
    conda:
        conda_env
    shell:
        """
        python3 workflow/scripts/extract_surfaces.py --infile {input.processeddata} --ncpus {resources.ntasks} \
        --outdir {output.outdir}
        """

rule generateMesh:
    input:
        "fTetWild/build/FloatTetwild_bin",
        csgtree=csgtree,
    output:
        outfile=mesh_path
    conda:
        conda_env
    resources:
        ntasks=lambda wildcards: size_to_ntasks(int(wildcards.rawdata.split("size+")[-1].split("_")[0]) / int(wildcards.processing.split("dx+")[-1].split("_")[0])),
        time=lambda wildcards: size_to_minutes(int(wildcards.rawdata.split("size+")[-1].split("_")[0]) / int(wildcards.processing.split("dx+")[-1].split("_")[0])),
    threads: lambda wildcards: size_to_ntasks(int(wildcards.rawdata.split("size+")[-1].split("_")[0]) / int(wildcards.processing.split("dx+")[-1].split("_")[0])),
    params:
        options=lambda wildcards: filename2options(wildcards.meshing)
    shell:
        """
        python3 workflow/scripts/generate_mesh.py \
        --csgtree {input.csgtree} \
        {params.options} \
        --output {output.outfile} \
        --max_threads {resources.ntasks} && \
        python3 workflow/scripts/seperate_touching_cells.py --infile {output.outfile} --output {output.outfile}
        """

rule generateSurfaceTags:
    input:
        meshfile=mesh_path
    output:
        mesh_tag_path
    conda:
        conda_env
    resources:
        time="120:00"
    shell:
        """
        python3 workflow/scripts/generate_surface_tags.py \
        --infile {input.meshfile} --output {output}
        """

rule evaluateMesh:
    input:
        mesh_path
    output:
        meshstatistic
    conda:
        conda_env
    shell:
        """
        python3 workflow/scripts/evaluate_mesh.py \
        --infile {input} --output {output}
        """

rule takeScreenshot:
    input:
        mesh_path
    output:
        mesh_img
    conda:
        conda_env
    shell:
        """
        xvfb-run -a python3 workflow/scripts/generate_screenshot.py \
        --infile {input} --output {output}
        """

rule generateAnalysisPlot:
    input:
        infile=imagestatistic
    output:
        plotfile=cellsizeplot
    conda:
        conda_env
    shell:
        """
        python3 workflow/scripts/generate_analysis_plots.py \
        --infile {input.infile} --output {output.plotfile}
        """

rule installFTetWild:
    input:
        storage.http("http://github.com/wildmeshing/fTetWild/archive/refs/heads/master.zip",
                    keep_local=False)
    conda:
        conda_env
    output:
        "fTetWild/build/FloatTetwild_bin",
        directory("fTetWild")
    shell:
        """
        unzip {input} -d fTetWild && cd fTetWild/build/ && cmake ../fTetWild-master && make -j
        """

